################
Sorting Examples
################

.. _sorting_along_wire:

Along Wire
=============

Vertices selected from and edge or wire might have a useful ordering when created from
a single object, but when created from multiple objects the ordering not useful. Here,
when applying incrementing fillet radii to a list of vertices from the face, the
ordering is random.

.. dropdown:: Setup

    .. code-block:: python

        from build123d import *

        with BuildSketch() as along_wire:
            Rectangle(48, 16, align=Align.MIN)
            Rectangle(16, 48, align=Align.MIN)
            Rectangle(32, 32, align=Align.MIN)

.. code-block:: python

    for i, v in enumerate(along_wire.vertices()):
        fillet(v, i + 1)

.. image:: ../assets/selectors_operators/sort_not_along_wire.png
    :align: center

The vertices may be sorted along the wire they fall on to create order.

.. code-block:: python

    sorted_verts = along_wire.vertices().sort_by(along_wire.wire())
    for i, v in enumerate(sorted_verts):
        fillet(v, i + 1)

.. image:: ../assets/selectors_operators/sort_along_wire.png
    :align: center

.. _sorting_distance_from:

Distance From
=========================

A ``sort_by_distance`` and be used to sort objects by their distance from another object.
Here we are sorting the boxes by distance from the origin, using an empty ``Vertex``
(at the origin) as the other shape to find distance to.

.. dropdown:: Setup

    .. code-block:: python

        from itertools import product
        from build123d import Box, ShapeList, Solid, Vertex
        from ocp_vscode import ColorMap, show

        boxes = ShapeList(
            Box(1, 1, 1).scale(0.75 if (i, j) == (1, 2) else 0.25).translate((i, j, 0))
            for i, j in product(range(-5, 6), repeat=2)
        )

.. code-block:: python

    boxes = boxes.sort_by_distance(Vertex())
    show(*boxes, colors=ColorMap.listed(len(boxes)))

.. image:: ../assets/selectors_operators/sort_distance_from_origin.png
    :align: center

The example can be extended by first sorting the boxes by volume using the ``Solid``
property `volume` and getting the last (largest) box. The boxes are then sorted by using
the largest box as the reference to sort distance from.

.. code-block:: python

    boxes = boxes.sort_by_distance(boxes.sort_by(Solid.volume).last)
    show(*boxes, colors=ColorMap.listed(len(boxes)))

.. image:: ../assets/selectors_operators/sort_distance_from_largest.png
    :align: center
